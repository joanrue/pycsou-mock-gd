[metadata]
name = pycsou-mock-gd

description = A mock Pycsou extension for testing purposes
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/joanrue/pycsou-mock-gd
author = Joan Rue Queralt
author_email = joan.rue.q@gmail.com
license = MIT
license_files = LICENSE
classifiers =
    Development Status :: 2 - Pre-Alpha
    Framework :: pycsou
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Topic :: Scientific/Engineering :: Image Processing
project_urls =
    Bug Tracker = https://github.com/joanrue/pycsou-mock-gd/issues
    Documentation = https://github.com/joanrue/pycsou-mock-gd#README.md
    Source Code = https://github.com/joanrue/pycsou-mock-gd
    User Support = https://github.com/joanrue/pycsou-mock-gd/issues

[options]
packages = find:
install_requires =
    pycsou @ git+https://github.com/matthieumeo/pycsou@v2-dev
python_requires = >= 3.9, < 3.12
include_package_data = True
package_dir =
    =src
setup_requires = setuptools_scm
# add your package requirements here

[options.packages.find]
where = src

# Note the `_` underscore to overload a base Pycsou class.
[options.entry_points]
pycsou.solver =
    GradientDescent = pycsou_mock_gd:GradientDescent




[options.extras_require]
testing =
    tox
    pytest  # https://docs.pytest.org/en/latest/contents.html
    pytest-cov  # https://pytest-cov.readthedocs.io/en/latest/

[options.package_data]
* = *.yaml

[flake8]
max-complexity = 10
exclude =
	# __init__.py often contain weird code to import top-level items.
	__init__.py
extend-ignore =
	# We follow Black's guidelines here.
	# E501: line too long
	# E203: whitespace before ':'
	# E302: expected 2 blank lines, found 1
	E501
	E203
	E302

	# Do not use lambda expressions. (OK when used sparringly.)
	E731

	# Too many leading '#' for block comment.
	# We use more '#' terms at times to improve visual delimiters of long block comments.
	E266

	# Implementation is too complex.
	# (Sometimes necessary in scientific code.)
	C901
